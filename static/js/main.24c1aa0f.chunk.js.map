{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchText","target","value","state","fetch","then","response","json","users","this","filteredMonters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAOL,EAAMI,QAAQE,QACrB,kCAAMN,EAAMI,QAAQG,aCHXC,G,MAAW,SAAAR,GAAK,OAC3B,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAAUA,GAAtBA,EAAQC,WCHZM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBAAOZ,UAAU,SAASa,KAAK,SAASC,SAAWF,EAAeD,YAAaA,MCmClEI,E,kDAlCb,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,WAAY,IAJH,E,qDAQb,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO7C,WAAU,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,SAAUU,EADX,EACWA,WACZU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC1CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAWY,kBACpD,OACE,sBAAK9B,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA3BRI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.24c1aa0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n    <h2> { props.monster.name }</h2>\r\n    <p> { props.monster.email }</p>\r\n  </div>\r\n);","import React from 'react';\r\nimport { Card } from '../card/card.component'\r\nimport './card-list.styles.css';\r\nexport const CardList = props => (\r\n  <div className=\"card-list\">\r\n  { props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={ monster } />\r\n  ))}\r\n  </div> \r\n);","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input className=\"search\" type=\"search\" onChange={ handleChange } placeholder={placeholder}/>\r\n);","import './App.css';\nimport React, {Component} from 'react'\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component.jsx';\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchText: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  handleChange = e => {\n    this.setState({ searchText: e.target.value});\n  }\n\n  render() {\n    const { monsters, searchText } = this.state;\n    const filteredMonters = monsters.filter(monster =>\n         monster.name.toLowerCase().includes(searchText.toLowerCase()));\n    return (\n      <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder=\"Search monsters\" handleChange={this.handleChange} />\n      <CardList monsters={filteredMonters}>\n      </CardList>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}